I"5<h2 id="영속성-관리">영속성 관리</h2>

<h4 id="dynamicupdate">@DynamicUpdate</h4>

<p>컬럼이 30개 이상이 되면, @DynamicUpdate를 사용한 동적 수정 쿼리가 정적 수정 쿼리보다 빠르다. 
하지만 한 테이블에 컬럼이 30개 이상 된다는 것은 테이블 설계상 분리가 적절하게 되지 않았을 가능성이 높다.</p>

<h3 id="sequencegenerator">@SequenceGenerator</h3>

<p>SequenceGenterator.allocationSize의 기본값은 50이다. 이는 최적화 때문인데, 만약 하나씩 증가해야한다면 1로 설정하면 된다.
@SeqyebceGeberator는 @GeneratedValue 옆에 사용해도 된다.</p>

<h2 id="엔티티-맵핑">엔티티 맵핑</h2>

<h3 id="column-생략">@Column 생략</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int data1;  // @Column생략, 자바 기본타입으로 not null로 생성된다.

Integer data2;  // @Column 생략하면 nullable속성으로 생성된다.
</code></pre></div></div>

<p>따라서 자바 기본타입에 @Column을 사용하면 nullable = false로 지정하는 것이 안전하다.</p>

<h2 id="연관관계-매핑-기초">연관관계 매핑 기초</h2>

<h3 id="양방향-맵핑">양방향 맵핑</h3>
<p>양방향 맵핑시에는 무한 루프에 빠지지 않게 조심해야한다. 
예를 들어 Member.toString()에서 getTeam()을 호출하고 
Team.toString()에서 getMember()를 호출하면 무한 루프에 빠질 수 있다. 
이런 문제는 엔티티를 JSON으로 변환할 때 자주 발생한다.</p>

:ET